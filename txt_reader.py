# -*- coding: utf-8 -*-
"""txt_reader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gqM4wRKvbQ89TwicmJSilIkJL-2qTV0G
"""

import hanja
from glob import glob
import argparse
import os
from hanja import hangul
import json
import re
from pprint import pprint

# 파일 불러오기
fname = "/Users/jaewanpark/Documents/회의록/회의록(text파일)/284여성(예산결산기금심사)소위01.txt"

with open(fname, 'r', encoding='utf-8-sig') as file:
    txt = file.readlines()
    pass
# print(txt)


def clean_up(txt):
    tt = []
    text = []
    for page in txt:
        sent = page.strip()
        sent = sent.split("\n")
        tt += sent
    for han in range(len(tt)):
        ktext = tt[han].replace('臨', '임').replace("委", "위").replace("員", '원').replace("金", "김").replace('淇', '기').replace('春', '춘').replace("柳", "유").replace("李", "이").replace("梁", "양").replace(
            "羅", "나").replace("利", "이").replace("勞", "노").replace("樂", "락").replace("盧", "노").replace("樂", "락").replace("龍", "용").replace("沈", "심").replace("呂", "려").replace("寧", "영")
        text.append(ktext)
    return text


text = clean_up(txt)
# print(text)


def clean_up_or(txt):
    text_or = []
    # 모든페이지 다 나눠서 리스트에 넣기
    for page in txt:
        sent = page.strip()
        sent = sent.split("\n")
        text_or += sent
    return text_or


text_or = clean_up_or(txt)
# print(text_or)

# date 텍스트 파일에서 yyyymmdd 형태의 날짜 뽑기


def date_extractor(text):
    pm_date = ''
    for i in range(7, 11):
        # pm_d += text[i]
        # pm_da = pm_d.split(' ')
        if text[i].startswith("日"):
            pm_da = text[i].split(' ')
            pm_dat = pm_da[-1].split("年")
            year = pm_dat[0]
            # print(year)
            mmdd = pm_dat[1].split("(")
            md = mmdd[0]
            # print(len(md))
            for i in range(len(md[1])):
                if md[1] == "月":
                    month = "0" + md[0]
                    if md[3] == "日":
                        day = "0" + md[2]
                    elif md[4] == "日":
                        day = md[2] + md[3]
                elif md[2] == "月":
                    month = md[0] + md[1]
                    if md[4] == "日":
                        day = "0" + md[3]
                    elif md[5] == "日":
                        day = md[3] + md[4]
            date = year + month + day
        elif text[i].startswith("일"):
            pm_da = text[i].split(' ')
            pm_dat = pm_da[-1].split("년")
            year = pm_dat[0]
            # print(year)
            mmdd = pm_dat[1].split("(")
            md = mmdd[0]
            # print(len(md))
            for i in range(len(md[1])):
                if md[1] == "월":
                    month = "0" + md[0]
                    if md[3] == "일":
                        day = "0" + md[2]
                    elif md[4] == "일":
                        day = md[2] + md[3]
                elif md[2] == "월":
                    month = md[0] + md[1]
                    if md[4] == "일":
                        day = "0" + md[3]
                    elif md[5] == "일":
                        day = md[3] + md[4]
            date = year + month + day
    return date


pm_date = date_extractor(text)
# print(pm_date)

# 작성자


def author(text):
    pm_author = ''
    for i in range(6, 12):
        if text[i].startswith('國') and text[i].endswith('處') or text[i].startswith('국') and text[i].endswith('處'):
            pm_author = hanja.translate(
                ''.join(text[i].split(' ')), "substitution")
    return pm_author


pm_author = author(text)
# print(pm_author)

# 안건


def topic_extractor(text):
    pm_topic = []
    s_start = False
    s_end = False
    break_early = False
    # s_sent = []
    for i in range(len(text)):
        sent = text[i].strip()
        if sent == '상정된 안건' or sent == '審査된案件' or sent == '심사된 안건':
            s_start = i
        if sent.endswith('개의)'):
            s_end = i - 5
            break_early = True
            if break_early:
                break
    while s_start <= s_end:
        s_start += 1
        topic = text[s_start].split('\t')
        topic = hanja.translate(topic[0], "substitution")
        topic.strip()
        pm_top = topic.split('\n')
        pm_topic += pm_top
    # pprint(pm_topic)
    return pm_topic


pm_topic = topic_extractor(text)
# print(pm_topic)

# 메타데이터


def meta_extractor(text, pm_date, pm_topic, pm_author, fname):

    meta = {}
    # 카테고리
    pm_cartegory = ''
    for i in range(3, 4):
        pm_cartegory += text[i]
        pm_carte = hanja.translate(pm_cartegory, 'substitution')

    pm_cartegory = "회의록>국회소위원회>" + pm_carte
    meta['카테고리'] = pm_cartegory

    pm_code = ''
    for i in range(1, 6):
        pm_code += text[i]
        pm_code = hanja.translate(pm_code, 'substitution')
    pm_code = pm_code.replace(" ", "")
    meta['회의록코드'] = pm_code
    # print(pm_code_)

    # 국회명
    pm_name_ = ""
    for i in range(1, 3):
        pm_name_ += text[i]
        pm_name = hanja.translate(pm_name_, 'substitution')

    meta['국회명'] = pm_name
    # print(pm_name)

    # 회의록 제목
    pm_title = ''
    for i in range(3, 5):
        pm_title += text[i]
        pm_title = hanja.translate(pm_title, 'substitution')
    pm_title = pm_title.replace(" ", "")
    meta['회의록제목'] = pm_title
    # print(pm_title_)

    # 작성자
    meta['작성'] = pm_author

    # 일시
    meta['일시'] = pm_date

    # 토픽
    meta['토픽'] = pm_topic

    # 파일명
    file_title = ''
    file_title = fname.split('/')[-1].split('.txt')[0]
    meta['파일명'] = file_title

    return meta


meta = meta_extractor(text, pm_date, pm_topic, pm_author, fname)
# pprint(meta)

# 본격적 대화(한글화버전)


def dialog_extractor(text):
    dialog = []
    doc = []
    # 대사 추출 프로그램
    # text는 전체를 아우르는 리스이다.
    # 이렇게 하면 doc는 1줄씩 나눈거
    for page in text:
        sents = page.split('\n')
        doc.append(sents)
    s_start = False
    s_end = False
    break_early = False
    # for i in range(len(doc)):
    #     page = doc[i]
    for sid in range(len(text)):
        sent = text[sid].strip()
        if sent.startswith('◯'):
            s_start = sid
            break_early = True
            break
        if break_early:
            break
    for sid in range(len(text)):
        sent = text[sid].strip()
        if sent.endswith('산회)'):
            s_end = sid

    for sid in range(len(text)):
        sent = text[sid].strip()
    break_early = False
    doc = []
    for sid in range(len(text)):
        if sid >= s_start and sid <= s_end - 1:
            sent = text[sid].strip()
            # ////////
            sent = hanja.translate(sent, 'substitution').replace("金", "김").replace("李", "이").replace("梁", "양").replace("羅", "나").replace("利", "이").replace(
                "勞", "노").replace("樂", "락").replace("盧", "노").replace("樂", "락").replace("龍", "용").replace("沈", "심").replace("呂", "려").replace("寧", "영").replace("宅", "택")
            # print(sent)
            if sent.endswith(")"):
                continue
            if sent.startswith('◯'):
                speaker = ' '.join(text[sid].split(' ')[0:3])
                tokens = ' '.join(text[sid].split(' ')[3:])
                sent1 = sent.replace('◯', '◯ ')
                doc.append(sent1)
            else:
                doc.append(sent)
    # pprint(doc)
    doc_p = ''.join(doc)
    # pprint(doc_p)
    doc_ps = doc_p.split('◯')
    # print(doc_ps)
    rev_doc = []
    for s in doc_ps:
        # if s.startswith('('):
        #     rev_doc.append(s)
        if s == '':
            pass
        elif s.startswith(" "):
            s = '◯'+s
            rev_doc.append(s)
        else:
            rev_doc.append(s)
    # doc_text = '\n'.join(rev_doc)
    # rev_doc = hanja.translate(rev_doc,'substitution')
    # pprint(rev_doc)
    dialog += rev_doc

    return dialog


dialog = dialog_extractor(text)
# pprint(dialog)

# 본격적 대화(원본)


def dialog_extractor_or(text_or):
    dialog_or = []
    doc = []
    # 대사 추출 프로그램
    # text는 전체를 아우르는 리스이다.
    # 이렇게 하면 doc는 1줄씩 나눈거
    for page in text_or:
        sents = page.split('\n')
        doc.append(sents)
    s_start = False
    s_end = False
    break_early = False
    # for i in range(len(doc)):
    #     page = doc[i]
    for sid in range(len(text_or)):
        sent = text_or[sid].strip()
        if sent.startswith('◯'):
            s_start = sid
            break_early = True
            break
        if break_early:
            break
    for sid in range(len(text_or)):
        sent = text_or[sid].strip()
        if sent.endswith('산회)'):
            s_end = sid

    for sid in range(len(text_or)):
        sent = text_or[sid].strip()
    break_early = False
    doc = []
    for sid in range(len(text_or)):
        if sid >= s_start and sid <= s_end - 1:
            sent = text_or[sid].strip()
            # ////////
            # print(sent)
            if sent.endswith(")"):
                continue
            if sent.startswith('◯'):
                speaker = ' '.join(text_or[sid].split(' ')[0:3])
                tokens = ' '.join(text_or[sid].split(' ')[3:])
                sent1 = sent.replace('◯', '◯ ')
                doc.append(sent1)
            else:
                doc.append(sent)
    # pprint(doc)
    doc_p = ''.join(doc)
    # pprint(doc_p)
    doc_ps = doc_p.split('◯')
    # print(doc_ps)
    rev_doc = []
    for s in doc_ps:
        # if s.startswith('('):
        #     rev_doc.append(s)
        if s == '':
            pass
        elif s.startswith(" "):
            s = '◯'+s
            rev_doc.append(s)
        else:
            rev_doc.append(s)
    # doc_text = '\n'.join(rev_doc)
    # rev_doc = hanja.translate(rev_doc,'substitution')
    # pprint(rev_doc)
    dialog_or += rev_doc

    return dialog_or


dialog_or = dialog_extractor_or(text_or)
# print(dialog_or)

# 대화에 참여자 이름, 직위


def speaker_extractor(dialog):
    persons = []
    occups = []
    speaker_ex = []
    for i in range(len(dialog)):
        dialog_s = dialog[i].split(' ')
        first_t = dialog_s[1]
        second_t = dialog_s[2]
        # print(dialog_s)
        # if first_t.endswith("관") or first_t.endswith("장") or first_t.endswith("위원") or first_t.endswith("참고인") and len(first_t) >= 3:
        if second_t != "의원" and second_t != "위원" and second_t != "委員":
            occup = first_t.replace("◯ ", "")
        else:
            person = first_t.replace("◯ ", "")
        if second_t == "의원" or second_t == "위원" or second_t == "委員":
            occup = second_t
        else:
            person = second_t

        persons.append(person)
        occups.append(occup)
    # print(persons[0] +" " + occups[0])

    po = []
    for j in range(len(persons)):
        sp = persons[j] + " " + occups[j]
        po.append(sp)
    # print(po)

    n_po = []
    for v in po:
        if v not in n_po:
            n_po.append(v)
    for w in range(len(n_po)):
        n_pos = n_po[w].split(' ')
        speaker_ex.append(n_pos)

    return speaker_ex


speaker_ex = speaker_extractor(dialog)
# pprint(speaker_ex)

# 발언자, 발언(한글수정)


def utterance_extractor(dialog):
    utterance_id = []
    utterance_form = []

    for i in range(len(dialog)):
        dialog_s = dialog[i].split(' ')
        first_s = dialog_s[1:3]
        second_s = dialog_s[4:]
        spk_id = ' '.join(first_s)
        utter = ' '.join(second_s)
        utterance_id.append(spk_id)
        utterance_form.append(utter)

    return utterance_id, utterance_form


utterance_ex = utterance_extractor(dialog)

# 발언자, 발언(원본)


def utterance_extractor_or(dialog_or):
    utterance_id = []
    utterance_form = []

    for i in range(len(dialog_or)):
        dialog_s = dialog_or[i].split(' ')
        first_s = dialog_s[1:3]
        second_s = dialog_s[4:]
        spk_id = ' '.join(first_s)
        utter = ' '.join(second_s)
        utterance_id.append(spk_id)
        utterance_form.append(utter)
    return utterance_id, utterance_form


utterance_ex_or = utterance_extractor_or(dialog_or)
# pprint(utterance_ex_or)

# # utterance info(원본, 한글버전)
# def dialog_formatting(utterance_ex, utterance_ex_or):
#     result = []
#     utterance_id = utterance_ex[0]
#     utterance_form = utterance_ex[1]
#     utterance_form_or = utterance_ex_or[1]

#     for s in range(len(dialog)):
#       d = {}
#       d['speaker'] = utterance_id[s]
#       d['utterance'] = utterance_form[s]
#       d['utterance_or'] = utterance_form_or[s]

#       result.append(d)


#     # result.append(d)
#     return result
# dialog_json = dialog_formatting(utterance_ex, utterance_ex_or)
# # pprint(dialog_json)

# utterance info(원본, 한글버전)
def dialog_formatting(utterance_ex, utterance_ex_or):
    dialog_json = []
    utterance_id = utterance_ex[0]
    utterance_form = utterance_ex[1]
    utterance_form_or = utterance_ex_or[1]

    for i in range(len(utterance_ex[0])):
        d = {}
        d['speaker'] = utterance_id[i]
        d['utterance'] = utterance_form[i]
        d['utterance_or'] = utterance_form_or[i]

        dialog_json.append(d)

    # result.append(d)
    return dialog_json


dialog_json = dialog_formatting(utterance_ex, utterance_ex_or)
# pprint(dialog_json)

# speaker info


def speaker_list_extractor(speaker_ex):
    speaker_list = []
    speaker = []
    speakers = []

    for i in range(len(speaker_ex)):

        name = speaker_ex[i][0]
        position = speaker_ex[i][1]
        d = {}
        d['id'] = name
        d['age'] = "NA"
        d['occupation'] = position
        d['sex'] = "NA"
        d['birthplace'] = "NA"
        d['principal_residence'] = "NA"
        d['current_residence'] = "NA"
        speaker_list.append(d)

    return speaker_list


speaker_list = speaker_list_extractor(speaker_ex)
# pprint(speaker_list)

# json 형태로 변환하기 위한 틀


def convert_to_korea(meta, speaker_list, dialog_json, id):
    # k = 0
    id = "SBRW 2100000001"
    # id_code = korea_formatted_data['id']
    # id = id_code.split(" ")
    # id0 = id[0]
    # id1 = int(id[1]) + k
    # id = id0 + str(id1)
    # korea_formatted_data['id'] = id
    # k += 1

    metadata = {}
    metadata['title'] = "국립국어원 국회 회의록 원시 말뭉치 " + id
    metadata['creator'] = "국립국어원"
    metadata['distributor'] = "국립국어원"
    metadata['year'] = "2021"
    metadata['category'] = meta['카테고리']
    metadata['annotation_level'] = ['원시']
    metadata['sampling'] = "본문 전체"

    doc = {}
    doc['id'] = id+".1"
    doc_metadata = {}
    doc_metadata['title'] = meta['회의록제목']
    doc_metadata['author'] = meta['작성']
    # doc_metadata['author_id'] = ""
    doc_metadata['publisher'] = meta['작성']
    doc_metadata['date'] = meta['일시']
    doc_metadata['topic'] = meta['토픽']
    doc_metadata['original_topic'] = ""
    doc_metadata['crawl_date'] = ""

    doc_metadata['speaker'] = speaker_list
    doc_metadata['setting'] = {}
    doc_metadata['setting']['relation'] = "NA"

    doc_metadata['file_id'] = '회의록 원문 자료 파일명:' + meta['파일명']

    doc['metadata'] = doc_metadata

    # doc['paragraph'] = []
    # paragraph = {}
    # paragraph['id'] = ""
    # paragraph['form'] = ""
    # paragraph['original_form'] = ""
    # doc['paragraph'].append(paragraph)

    utterance = []

    n = 0
    for i in dialog_json:
        utter = {}
        utter['id'] = id+".1.1." + str(n)
        utter['form'] = i['utterance']
        utter['original_form'] = i['utterance_or']
        utter['speaker_id'] = i['speaker']
        utter['note'] = ""
        utterance.append(utter)
        n += 1

    doc['utterance'] = utterance

    d = {}
    d['id'] = id
    d['metadata'] = metadata
    d['document'] = doc

    return d


korea_formatted_data = convert_to_korea(meta, speaker_list, dialog_json, id)
# pprint(korea_formatted_data['document']['utterance'][0])

# argparse 이용 터미널로 불러오기
parser = argparse.ArgumentParser(description='list to json')
parser.add_argument('--input', metavar='', type=str,
                    required=True, help='Input Folder')
parser.add_argument('--output', metavar='', type=str,
                    required=True, help='Output Folder')
args = parser.parse_args()


# json 형태로 변환

def txt_reader(input, output, id):
    k = 0
    files = sorted(glob(input + "*.txt"))
    for fname in files:
        with open(fname, 'r', encoding='utf-8-sig') as file:
            txt = file.readlines()
            pass
            text = clean_up(txt)
            text_or = clean_up_or(txt)
            pm_date = date_extractor(text)
            pm_author = author(text)
            pm_topic = topic_extractor(text)
            # fname은 바꿀 부분
            meta = meta_extractor(text, pm_date, pm_topic, pm_author, fname)
            dialog = dialog_extractor(text)
            dialog_or = dialog_extractor_or(text_or)
            speaker_ex = speaker_extractor(dialog)
            utterance_ex = utterance_extractor(dialog)
            utterance_ex_or = utterance_extractor_or(dialog_or)
            dialog_json = dialog_formatting(utterance_ex, utterance_ex_or)
            # print(dialog_json)
            speaker_list = speaker_list_extractor(speaker_ex)
            # print(speaker_list)

            korea_formatted_data = convert_to_korea(
                meta, speaker_list, dialog_json, id)
            id = "SBRW 2100000001"
            id_code = id.split(" ")
            id0 = id_code[0]
            id1 = int(id_code[1]) + k
            id_code = id0 + str(id1)
            korea_formatted_data['id'] = id_code
            korea_formatted_data['metadata']['title'] = "국립국어원 국회 회의록 원시 말뭉치 " + id_code
            korea_formatted_data['document']['id'] = id_code + ".1"
            # print(korea_formatted_data['document']['utterance'][0]['id'])
            # pprint(korea_formatted_data)
            n = 0
            for i in dialog_json:
                korea_formatted_data['document']['utterance'][n]['id'] = id_code + \
                    ".1.1." + str(n)
                n += 1
            k += 1

        fname_write = fname.split('/')[-1].split('.txt')[0]

        with open(output+fname_write+'.json', 'w') as f:
            json.dump(korea_formatted_data, f, ensure_ascii=False, indent=4)

        # /content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/(jw)pm_summary_preprocessor/


if __name__ == '__main__':
    txt_reader(args.input, args.output, id)

# json 형태로 변환
# def txt_reader(id):
#   files = sorted(glob('/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/(jw)pm_summary_preprocessor/*.txt'))
#   for fname in files:
#     with open(fname, 'r', encoding='utf-8-sig') as file:
#       text = file.readlines()
#       pass

#     fname_write = fname.split('/')[-1].split('.txt')[0]

#     with open('/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/(jw)pm_summary_preprocessor/'+fname_write+'.json', 'w') as f:
#       json.dump(korea_formatted_data, f, ensure_ascii=False, indent=4)

# txt_reader()
# txt_reader(fname)
