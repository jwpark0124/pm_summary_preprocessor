# -*- coding: utf-8 -*-
"""txt_reader(0928).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lM-Sb28_V_5-cdJ4vYqoAggyHySvgzJ
"""

# !pip install hanja

import operator
from itertools import chain
from collections import defaultdict
import unicodedata
import hanja
import argparse
from hanja import hangul
# import pandas as pd
import csv
import json
import re
from  pprint import pprint
from glob import glob
import collections

sample = sorted(glob("/Users/jaewanpark/Documents/회의록/pm_summary_preprocessor(pjw)/요약대상회의록-2차/*.txt"))


# 파일 불러오기

# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/284여성(예산결산기금심사)소위01.txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/311법사(법안심사제1)소위01(12.11.15).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/311환노(법안심사)소위01(12.9.17).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/320환노(예산결산기금심사)소위03(13.11.28).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/321교문(예산결산기금심사)소위03(13.12.16).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/321국토(교통법안심사)소위01(13.12.12).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/322국토(민투mrg대책)소위01(14.2.26).txt"
fname = "/Users/jaewanpark/Documents/회의록/pm_summary_preprocessor(pjw)/요약대상회의록-1차/311법사(법안심사제1)소위01(12.11.15).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/323국토(철도산업발전)소위02(14.4.10).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/320교문(청원심사)소위01(13.11.18).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/346외통(법안심사)소위02(16.10.28.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/346국방(예산결산심사)소위03(16.11.3.)(비공개포함).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/347안행(안전및선거법심사)소위01(16.12.20.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/354환노(고용노동)소위03(17.9.28.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/337복지(보육제도개선)소위02(15.11.25).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1차/322국토(민투mrg대책)소위01(14.2.26).txt"

# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311교과(법안심사)소위03(12.9.24).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311국토(예산결산기금심사)소위02(12.11.7).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311법사(예산결산심사)소위03(12.11.21).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311법사(예산결산심사)소위04(12.12.3).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311외통(법안심사)소위03(12.11.19).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311재정(경제재정)소위03(12.9.24).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311재정(예산결산기금심사)소위03(12.11.6).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311재정(예산결산기금심사)소위08(12.11.15).txt"

# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311재정(예산결산기금심사)소위09(12.11.20).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/311행안(법안심사)소위02(12.9.19).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/313문방(법안심사)소위01(13.2.15).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/315국방(예산결산심사)소위01(13.4.23).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/315여성(유엔협약이행정책심사)소위01(13.4.23).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/315국토(교통법안심사)소위01(13.4.23).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/315재정(예산결산기금심사)소위03(13.5.3).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/315재정(조세)소위02(13.4.18).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/315환노(법안심사)소위02(13.4.17)(공청회).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/320국토(청원심사)소위01(13.10.8).txt"

# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/321법사(예산결산심사)소위02(13.12.12).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/323국토(철도산업발전)소위03(14.4.16).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/323국토(청원심사)소위01(14.4.11).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/324법사(법안심사제2)소위01(14.4.22).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/329법사(법안심사제1)소위01(14.11.6).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/329재정(예산결산기금심사)소위03(14.11.11).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/329환노(법안심사)소위06(14.12.8).txt"

# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/334안행(예산결산기금심사)소위02(15.7.3).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/340국방(법률안심사)소위01(16.2.16).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/346기재(조세)소위08(16.11.28.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/348법사(법안심사제1)소위01(17.1.18.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/349국방(법률안심사)소위02(17.2.13.)(공청회).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/337국방(청원심사)소위01(15.11.18).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/340국방(법률안심사)소위01(16.2.16).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/349국방(법률안심사)소위02(17.2.13.)(공청회).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/353기재(조세)소위01(17.8.22.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/354여성(법안심사)소위01(17.9.18.)(공청회).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/356여성(국제규약점검)소위01(18.2.13.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/360국토(교통법안심사)소위01(18.5.24.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/364국토(국토법안심사)소위04(18.12.07.)(공청회).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/364국방(병역특례제도개선)소위02(18.11.29.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/371환노(예산결산기금심사)소위05(19.11.7.).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/377행안(예산.결산및기금심사)소위01(20.4.28.).txt"

# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 2차/349국방(법률안심사)소위02(17.2.13.)(공청회).txt"
# fname = "/content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/회의록 1,2차/332법사(법안심사제1)소위02(15.5.1).txt"

# txt= []
with open(fname, 'r', encoding='utf-8-sig') as file:
  txt = file.readlines()
  pass
# a = unicodedata.normalize('NFC','金')
# b = unicodedata.normalize('NFC',"樂")
# c = unicodedata.normalize('NFC',"柳")
# d = unicodedata.normalize('NFC',"劉")
#     # 같은 한자여도 유니코드가 다를 수 있다. 때문에 하나의 형태의 유니코드로 통일시켜 아래와 같이 적용***
#     # 다른 한자로 읽어 들이는 오류를 미리 방지. ex) 金 -> 김, 금 : 한자가 같아도 유니코드가 다르다.
#     # ***
# for han in range(len(txtt)): 
#   txttt = txtt[han].replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",c).replace("劉",d).replace("劉",d)  
#   txt.append(txttt) 

# pprint(txt)

def clean_up(txt):
  a = unicodedata.normalize('NFC','金')
  b = unicodedata.normalize('NFC',"樂")
  c = unicodedata.normalize('NFC',"柳")
  d = unicodedata.normalize('NFC',"劉")
  tt = []
  ttt = []
  text = []  
  for page in txt:
    sent = page.strip().replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",c).replace("劉",d).replace("劉",d)        
    sent = sent.split("\n")
    tt += sent
  for i in range(len(tt)):
    if tt[i].endswith("."):            
      index = tt[i].rfind('.')
      text.append(tt[i][:index] + '. ')
    elif tt[i].endswith("?"):            
      index = tt[i].rfind('?')
      text.append(tt[i][:index] + '? ')
    elif tt[i].endswith("!"):            
      index = tt[i].rfind('!')
      text.append(tt[i][:index] + '! ')
    else:
      text.append(tt[i])
  
  return text
text = clean_up(txt)
# pprint(text)

# yyyymmdd 형태의 날짜 추출
def date_extractor(text):
  pm_date = ''  
  for i in range(7,11):    
    if text[i].startswith("日"):      
      pm_da = text[i].split(' ')      
      pm_dat = pm_da[-1].split("年")            
      year = pm_dat[0]
      mmdd = pm_dat[1].split("(") 
      md = mmdd[0]      
      for i in range(len(md[1])):
        if md[1] == "月":
          month = "0" + md[0]
          if md[3] == "日":
            day = "0" + md[2]
          elif md [4] == "日":
            day = md[2] + md[3]
        elif md[2] == "月":
          month = md[0] + md[1]
          if md[4] == "日":
            day = "0" + md[3]
          elif md [5] == "日":
            day = md[3] + md[4]
      date = year + month + day
    elif text[i].startswith("일"):
      pm_da = text[i].split(' ')      
      pm_dat = pm_da[-1].split("년")            
      year = pm_dat[0]
      mmdd = pm_dat[1].split("(") 
      md = mmdd[0]      
      for i in range(len(md[1])):
        if md[1] == "월":
          month = "0" + md[0]
          if md[3] == "일":
            day = "0" + md[2]
          elif md [4] == "일":
            day = md[2] + md[3]
        elif md[2] == "월":
          month = md[0] + md[1]
          if md[4] == "일":
            day = "0" + md[3]
          elif md [5] == "일":
            day = md[3] + md[4]
      date = year + month + day
  return date     
pm_date = date_extractor(text)
# print(pm_date)

# 작성자 추출
def author(text):
  pm_author = ''
  for i in range(6,12):
    if text[i].startswith('國') and text[i].endswith('處')  or text[i].startswith('국') and text[i].endswith('처'):
      pm_author = ''.join(text[i].split(' '))
  return pm_author
pm_author = author(text)
# print(pm_author)

# 안건
def topic_extractor(text):
  pm_topi =[]
  pm_topic =[]
  pm_topict =[]
  pm_topicc = []
  s_start = False
  s_end = False
  break_early = False  
  for i in range(len(text)):
    sent = text[i].strip()
    if sent == '상정된 안건' or sent == '審査된案件' or sent == '심사된 안건':
      s_start = i    
    if sent.endswith('개의)'):
      s_end = i - 5
      break_early = True
      if break_early:
        break             
  while s_start <= s_end:
    s_start += 1
    topic = text[s_start].split('\t')    
    topic = hanja.translate(topic[0],"substitution")
    topic.strip()
    pm_top = topic.split('\n')
    pm_topi += pm_top
  # if pm_topi[-1].endswith(")"):
  #   for s in range(len(pm_topi)):
  #     if not (pm_topi[s].startswith("가") or pm_topi[s].startswith("나") or pm_topi[s].startswith("다") or pm_topi[s].startswith("라") or pm_topi[s].startswith("마") or pm_topi[s].startswith("바") or pm_topi[s].startswith("사")):
  #       pm_topic1 = pm_topi[s] + " / "
  #       pm_topicc += pm_topic1.split('\n')
  #   pm_topicc[-1] = pm_topicc[-1].replace(" / ","")    
  if len(pm_topi) == 1:
    pm_topicc += pm_topi
  elif pm_topi[0].startswith("1") and pm_topi[1].startswith("2"):
    for s in range(len(pm_topi)):
      pm_topic1 = pm_topi[s] + " / "
      pm_topicc += pm_topic1.split('\n')
    pm_topicc[-1] = pm_topicc[-1].replace(" / ","")        
  else:    
    try:      
      if type(int(pm_topi[-1][0])) == int:
        for n in range(len(pm_topi)-1):      
          for m in range(len(pm_topi) -1):        
            if pm_topi[n].startswith("{}".format(m)) and pm_topi[n+1].startswith("가"):
              pm_topic1 = pm_topi[n] + " > "                            
              pm_topicc += pm_topic1.split('\n')
            elif pm_topi[n].startswith("{}".format(m)) and not pm_topi[n+1].startswith("가"):
              pm_topicc += pm_topi[n] + " / "
          if pm_topi[n].startswith("가") or pm_topi[n].startswith("나") or pm_topi[n].startswith("다") or pm_topi[n].startswith("라") or pm_topi[n].startswith("마") or pm_topi[n].startswith("바") or pm_topi[n].startswith("사"):
              pm_topicc += pm_topi[n].split('\n')
        pm_topicc += pm_topi[-1]
    except ValueError:
      for n in range(len(pm_topi)):      
        for m in range(len(pm_topi)):        
          if pm_topi[n].startswith("{}".format(m)) and pm_topi[n+1].startswith("가"):
            pm_topic1 = pm_topi[n] + " > "
            pm_topicc += pm_topic1.split('\n')      
          elif pm_topi[n].startswith("{}".format(m)) and not pm_topi[n+1].startswith("가"):
            pm_topicc += pm_topi[n] + " / "
        if pm_topi[n].startswith("가") or pm_topi[n].startswith("나") or pm_topi[n].startswith("다") or pm_topi[n].startswith("라") or pm_topi[n].startswith("마") or pm_topi[n].startswith("바") or pm_topi[n].startswith("사"):
            pm_topicc += pm_topi[n].split('\n')  
  x = range(len(pm_topi))
  y = range(1, len(pm_topi))
  
  for a, b in zip(x, y):   
    if pm_topicc[a].startswith("가") and pm_topicc[b].startswith("나"):
      pm_topicc[a] = pm_topicc[a] +", "      
    if pm_topicc[a].startswith("나") and pm_topicc[b].startswith("다"):
      pm_topicc[a] = pm_topicc[a] +", "
    if pm_topicc[a].startswith("다") and pm_topicc[b].startswith("라"):
      pm_topicc[a] = pm_topicc[a] +", "
    if pm_topicc[a].startswith("라") and pm_topicc[b].startswith("마"):
      pm_topicc[a] = pm_topicc[a] +", "
    if pm_topicc[a].startswith("마") and pm_topicc[b].startswith("바"):
      pm_topicc[a] = pm_topicc[a] +", "
    if pm_topicc[a].startswith("바") and pm_topicc[b].startswith("사"):
      pm_topicc[a] = pm_topicc[a] +", "
    if pm_topicc[a].startswith("가") and not pm_topicc[b].startswith("나"):
      pm_topicc[a] = pm_topicc[a] + " / "  
    if pm_topicc[a].startswith("나") and not pm_topicc[b].startswith("다"):
      pm_topicc[a] = pm_topicc[a] + " / "
    if pm_topicc[a].startswith("다") and not pm_topicc[b].startswith("라"):
      pm_topicc[a] = pm_topicc[a] + " / "
    if pm_topicc[a].startswith("라") and not pm_topicc[b].startswith("마"):
      pm_topicc[a] = pm_topicc[a] + " / "
    if pm_topicc[a].startswith("마") and not pm_topicc[b].startswith("바"):
      pm_topicc[a] = pm_topicc[a] + " / "
    if pm_topicc[a].startswith("바") and not pm_topicc[b].startswith("사"):
      pm_topicc[a] = pm_topicc[a] + " / "
    if pm_topicc[a].startswith("사") and not pm_topicc[b].startswith("아"):
      pm_topicc[a] = pm_topicc[a] + " / "
  
  for f in range(len(pm_topicc)):
    pm_topict += pm_topicc[f].split('\n')
    pm_topic =''.join(pm_topict)
  
  return pm_topic
pm_topic = topic_extractor(text)
# pprint(pm_topic)

# 메타데이터
def meta_extractor(text, pm_date, pm_topic, pm_author, fname):
    meta = {}
    # 카테고리
    pm_category = ''
    for i in range(3,4):
      pm_category += text[i]
      pm_cate = pm_category
    
    pm_category = "회의록 > 국회소위원회 > " + pm_cate
    meta['카테고리'] = pm_category
        
    pm_code =''
    for i in range(1,6):
        pm_code += text[i]
        pm_code = pm_code
    pm_code = pm_code.replace(" ","")
    meta['회의록코드'] = pm_code
    
    # 국회명
    pm_name_ =""
    for i in range(1,3):
      pm_name_ += text[i]
      pm_name = pm_name_

    meta['국회명'] = pm_name

    # 회의록 제목
    pm_title =''
    for i in range(1,6):
      if i % 2 == 0:
        pm_title += text[i]
        pm_title = pm_title
      elif i % 2 == 1 and i % 5 != 0: 
        pm_title += " " + text[i]
        pm_title = pm_title          
      elif i % 5 == 0 :
        pm_title += " " + text[i].replace(" ","")
        pm_title = pm_title
    meta['회의록제목'] = pm_title.replace(" ","")
        
    # 작성자    
    meta['작성'] = pm_author

    # 일시    
    meta['일시'] = pm_date

    # 토픽    
    meta['토픽'] = pm_topic

    # 파일명
    f_title = ''
    f_title = fname.split('/')[-1].split('.txt')[0]
    f_title1 = unicodedata.normalize('NFD',f_title)
    file_title = unicodedata.normalize('NFC',f_title1)
    meta['파일명'] = file_title    
    return meta
    
meta = meta_extractor(text, pm_date, pm_topic, pm_author, fname)
# pprint(meta)

# 본격적 대화(한글버전)
def dialog_extractor(txt):
  s_start = False
  s_end = False
  break_early =False  
  dialog = []
  doc = []   
  a = unicodedata.normalize('NFC','金')
  b = unicodedata.normalize('NFC',"樂")
  c = unicodedata.normalize('NFC',"柳")  
  d = unicodedata.normalize('NFC',"劉")
   
  for i in range(len(txt)):
    if txt[i].startswith("◯"):
      s_start = i
      break_early = True
      if break_early:
        break 
  break_early = False
  for sid in range(len(txt)):
      sent = txt[sid].lstrip().replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",c).replace("劉",d).replace("劉",d)
      if sent.endswith('산회)\n') or sent.endswith('중지)\n'):
          s_end = sid 
  for sid in range(len(txt)):  
    if sid >= s_start and sid <= s_end - 1:
      sent = txt[sid].replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",c).replace("劉",d).replace("劉",d).replace("金","김").replace("李","이").replace("梁","양").replace("羅","나").replace("利","이").replace("勞","노").replace("樂","락").replace("盧","노").replace("樂","락").replace("龍","용").replace("沈","심").replace("呂","려").replace("寧","영").replace("宅","택").replace("柳","유")
      sent = hanja.translate(sent,'substitution')
      if sent.startswith("1.") or sent.startswith("2.") or sent.startswith("3.") or sent.startswith("4.") or sent.startswith("5.") or sent.startswith("가.") or sent.startswith("나.") or sent.startswith("다.") or sent.startswith("라."):
        continue                
      if sent.startswith('◯'):
        sent1 = sent.replace('◯','◯ ')          
        doc.append(sent1)
      else:
        doc.append(sent)
  doc_q = []
  doc_ps =[]
  
  de = []
  for yes in range(len(doc)):
    agree = doc[yes].rstrip()    
    if agree.endswith("음)"):      
      doc[yes-1] += agree.lstrip()
      doc_q = ''.join(doc[yes-1].replace('\n(','$%^(').split('\n'))                  
      doc_ps.append(doc_q)      
      
    elif agree.startswith("(") and agree.endswith(")"):
      pass
    else:
      doc_q = ''.join(doc[yes].replace('\n','$%^\n').split('\n'))              
      doc_ps.append(doc_q)
  
  numb = []
  for num in range(len(doc_ps)):
    nnu = doc_ps[num]
    if nnu.endswith("음)"):
      numb.append(num-1)
  ddoc = []
  for pp in range(len(numb)):
    ddoc.append(doc_ps[numb[pp]])


  doc_fn = []
  for k in range(len(doc_ps)):
    if doc_ps[k] not in ddoc:
      doc_fn.append(doc_ps[k])
  
  doc_psddd1 = {}
  kkk = []
  kk = []
  n = 1
  for i in range(len(doc_fn)):
    if doc_fn[i].startswith("◯ "):
      doc_psd ='id{0}# {1}'.format(n,doc_fn[i])
      doc_psdd = doc_psd.split("# ")
      doc_psddd = {doc_psdd[0]:doc_psdd[1]}
      # pprint(doc_psddd)
      doc_psddd1.update(doc_psddd)  
      doc_pst = doc_fn[i].split(" ")
      saram = 'id{0}  ◯ {1} {2}'.format(n,doc_pst[1],doc_pst[2])
      n += 1    
      saramin = saram.split("  ")
      saraminga = {saramin[0]:saramin[1]}
      kk.append(doc_psddd)             
      kkk.append(doc_psddd.values())            
    elif doc_fn[i] == "$%^":      
      pass
    elif not (doc_fn[i].startswith("◯") or doc_fn[i].startswith("  ")):
      pass
    else:
      doc_psd ='id{0}# {1}'.format(n-1,doc_fn[i])
      doc_psdd = doc_psd.split("# ")      
      doc_psddd = {doc_psdd[0]:doc_psdd[1]}      
      r = dict(list(saraminga.items()) + list(doc_psddd.items()) + [(k, saraminga[k] + doc_psddd[k]) for k in set(doc_psddd) & set(saraminga)])      
      kk.append(r)             
      kkk.append(r.values())  

  for i in range(len(kkk)):
    dialog += list(kkk[i])
  # pprint(kkk)
  # pprint(kk)
  return dialog
dialog = dialog_extractor(txt)
# pprint(dialog)

# 본격적 대화(원본)
def dialog_extractor_or(txt):
  s_start = False
  s_end = False
  break_early =False  
  dialog_or = []
  doc = []        
  a = unicodedata.normalize('NFC','金')
  b = unicodedata.normalize('NFC',"樂")
  c = unicodedata.normalize('NFC',"柳")
  d = unicodedata.normalize('NFC',"劉")    
#  柳一鎬
#  柳一鎬
  for i in range(len(txt)):
    if txt[i].startswith("◯"):
      s_start = i
      break_early = True
      if break_early:
        break 
  break_early = False
  for sid in range(len(txt)):
      sent = txt[sid].lstrip().replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",d).replace("劉",d).replace("劉",d)
      if sent.endswith('산회)\n') or sent.endswith('중지)\n'):
          s_end = sid 
  for sid in range(len(txt)):
    if sid >= s_start and sid <= s_end - 1:
      sent = txt[sid].replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",c).replace("劉",d).replace("劉",d)
      if sent.startswith("1.") or sent.startswith("2.") or sent.startswith("3.") or sent.startswith("4.") or sent.startswith("5.") or sent.startswith("가.") or sent.startswith("나.") or sent.startswith("다.") or sent.startswith("라."):
        continue                
      if sent.startswith('◯'):        
        sent1 = sent.replace('◯','◯ ')          
        doc.append(sent1)              
      else:
        doc.append(sent)
    
  
  doc_q = []
  doc_ps =[]
  
  de = []
  for yes in range(len(doc)):
    agree = doc[yes].rstrip()    
    if agree.endswith("음)"):      
      doc[yes-1] += agree.lstrip()
      doc_q = ''.join(doc[yes-1].replace('\n(','$%^(').split('\n'))                  
      doc_ps.append(doc_q)      
      
    elif agree.startswith("(") and agree.endswith(")"):
      pass
    else:
      doc_q = ''.join(doc[yes].replace('\n','$%^\n').split('\n'))              
      doc_ps.append(doc_q)
  
  numb = []
  for num in range(len(doc_ps)):
    nnu = doc_ps[num]
    if nnu.endswith("음)"):
      numb.append(num-1)
  ddoc = []
  for pp in range(len(numb)):
    ddoc.append(doc_ps[numb[pp]])


  doc_fn = []
  for k in range(len(doc_ps)):
    if doc_ps[k] not in ddoc:
      doc_fn.append(doc_ps[k])
  
  doc_psddd1 = {}
  kkk = []
  kk = []
  n = 1
  for i in range(len(doc_fn)):
    if doc_fn[i].startswith("◯ "):
      doc_psd ='id{0}# {1}'.format(n,doc_fn[i])
      doc_psdd = doc_psd.split("# ")
      doc_psddd = {doc_psdd[0]:doc_psdd[1]}
      # pprint(doc_psddd)
      doc_psddd1.update(doc_psddd)  
      doc_pst = doc_fn[i].split(" ")
      saram = 'id{0}  ◯ {1} {2}'.format(n,doc_pst[1],doc_pst[2])
      n += 1    
      saramin = saram.split("  ")
      saraminga = {saramin[0]:saramin[1]}
      kk.append(doc_psddd)             
      kkk.append(doc_psddd.values())            
    elif doc_fn[i] == "$%^":      
      pass
    elif not (doc_fn[i].startswith("◯") or doc_fn[i].startswith("  ")):
      pass
    else:
      doc_psd ='id{0}# {1}'.format(n-1,doc_fn[i])
      doc_psdd = doc_psd.split("# ")      
      doc_psddd = {doc_psdd[0]:doc_psdd[1]}      
      r = dict(list(saraminga.items()) + list(doc_psddd.items()) + [(k, saraminga[k] + doc_psddd[k]) for k in set(doc_psddd) & set(saraminga)])      
      kk.append(r)             
      kkk.append(r.values())
  # pprint(kk)
  # print(kkk)
  for i in range(len(kkk)):
    dialog_or += list(kkk[i])
  # print(dialog_or)
  return dialog_or
dialog_or = dialog_extractor_or(txt)
# pprint(dialog_or)

def mapping(txt):
  s_start = False
  s_end = False
  break_early =False  
  mapping = []
  doc = []        
  n_id =[]
  o_id = [] 
  o_utter = []
  n_utter = []
  a = unicodedata.normalize('NFC','金')
  b = unicodedata.normalize('NFC',"樂")
  c = unicodedata.normalize('NFC',"柳")
  d = unicodedata.normalize('NFC',"劉")    
#  柳一鎬
#  柳一鎬
  for i in range(len(txt)):
    if txt[i].startswith("◯"):
      s_start = i
      break_early = True
      if break_early:
        break 
  break_early = False
  for sid in range(len(txt)):
      sent = txt[sid].lstrip().replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",d).replace("劉",d).replace("劉",d)
      if sent.endswith('산회)\n') or sent.endswith('중지)\n'):
          s_end = sid 
  for sid in range(len(txt)):
    if sid >= s_start and sid <= s_end - 1:
      sent = txt[sid].replace("金",a).replace("金",a).replace("樂",b).replace("樂",b).replace("柳",c).replace("柳",c).replace("劉",d).replace("劉",d)
      if sent.startswith("1.") or sent.startswith("2.") or sent.startswith("3.") or sent.startswith("4.") or sent.startswith("5.") or sent.startswith("가.") or sent.startswith("나.") or sent.startswith("다.") or sent.startswith("라."):
        continue                
      if sent.startswith('◯'):        
        sent1 = sent.replace('◯','◯ ')          
        doc.append(sent1)              
      else:
        doc.append(sent)
    
  
  doc_q = []
  doc_ps =[]
  
  de = []
  for yes in range(len(doc)):
    agree = doc[yes].rstrip()    
    if agree.endswith("음)"):      
      doc[yes-1] += agree.lstrip()
      doc_q = ''.join(doc[yes-1].replace('\n(','$%^(').split('\n'))                  
      doc_ps.append(doc_q)      
      
    elif agree.startswith("(") and agree.endswith(")"):
      pass
    else:
      doc_q = ''.join(doc[yes].replace('\n','$%^\n').split('\n'))              
      doc_ps.append(doc_q)
  
  numb = []
  for num in range(len(doc_ps)):
    nnu = doc_ps[num]
    if nnu.endswith("음)"):
      numb.append(num-1)
  ddoc = []
  for pp in range(len(numb)):
    ddoc.append(doc_ps[numb[pp]])

  doc_fn = []
  for k in range(len(doc_ps)):
    if doc_ps[k] not in ddoc:
      doc_fn.append(doc_ps[k])  
  doc_psddd1 = {}
  kkk = []
  
  n = 1
  for i in range(len(doc_fn)):
    if doc_fn[i].startswith("◯ "):
      doc_psd ='o_id.{0}# {1}'.format(n,doc_fn[i])
      doc_psdd = doc_psd.split("# ")
      doc_psddd = {doc_psdd[0]:doc_psdd[1]}
      o_id.append(doc_psdd[0])
      o_utter.append(doc_psdd[1])
      doc_psddd1.update(doc_psddd)  
      doc_pst = doc_fn[i].split(" ")
      saram = 'o_id.{0}  ◯ {1} {2}'.format(n,doc_pst[1],doc_pst[2])
      n += 1    
      saramin = saram.split("  ")
      saraminga = {saramin[0]:saramin[1]}      
      kkk.append(doc_psddd.values())            
      
    elif doc_fn[i] == "$%^":      
      # print(doc_fn[i])
      pass
    elif not (doc_fn[i].startswith("◯") or doc_fn[i].startswith("  ")):
      pass
    else:
      doc_psd ='o_id.{0}# {1}'.format(n-1,doc_fn[i])
      doc_psdd = doc_psd.split("# ")      
      doc_psddd = {doc_psdd[0]:doc_psdd[1]}
      o_id.append(doc_psdd[0])
      o_utter.append(doc_psdd[1])     
      r = dict(list(saraminga.items()) + list(doc_psddd.items()) + [(k, saraminga[k] + doc_psddd[k]) for k in set(doc_psddd) & set(saraminga)])      
      # o_id.append(list(r.keys()))          
      kkk.append(r.values())  

  # pprint(o_utter)
  
  
  m=1  
  for j in range(len(doc_fn)):
    if doc_fn[j] == "$%^":         
      pass
    elif not (doc_fn[j].startswith("◯") or doc_fn[j].startswith("  ")):
      pass
    else:      
      doc_psd ='n_id.{0}# {1}'.format(m,doc_fn[j])
      m += 1
      doc_psdd = doc_psd.split("# ")
      doc_psdddd = {doc_psdd[0]:doc_psdd[1]}      
      # tot(doc_psdd[0]) = doc_psddds
      # tot[str(doc_psdddd.keys())] = doc_psddd
      n_id.append(doc_psdd[0])
      n_utter.append(doc_psdd[1])
  # pprint(n_utter)
  # pprint(o_id)
  for i in range(len(kkk)):
    mapping += list(kkk[i])
  # pprint(mapping)  

  return o_id, n_id, o_utter, n_utter
map = mapping(txt)
# print(map)

# 대화에 참여자 이름, 직위(한글화)
def speaker_extractor(dialog):
  global persons
  persons =[]
  occups = []
  speaker_ex = []
  for i in range(len(dialog)):
    dialog_s = dialog[i].split(' ')    
    first_t = dialog_s[1]
    second_t = dialog_s[2]
    # print(dialog_s)
    # if first_t.endswith("관") or first_t.endswith("장") or first_t.endswith("위원") or first_t.endswith("참고인") and len(first_t) >= 3:
    if second_t != "의원" and second_t != "위원" and second_t != "委員" and second_t != "議員":
      occup = first_t.replace("◯ ","")
    else:
      person = first_t.replace("◯ ","")
    if second_t == "의원" or second_t == "위원" or second_t == "委員" or second_t == "議員":
      occup = second_t
    else:
      person = second_t    
    
    persons.append(person)
    occups.append(occup)   
  po = []
  for j in range(len(persons)):
    sp = persons[j]+ " " + occups[j]
    po.append(sp)
  
    
  n_po = []
  for v in po:
    if v not in n_po:
      n_po.append(v)    
  for w in range(len(n_po)):
    n_pos = n_po[w].split(' ') 
    speaker_ex.append(n_pos)        
  return speaker_ex 
speaker_ex = speaker_extractor(dialog)
# pprint(speaker_ex)

# 대화에 참여자 이름, 직위
def speaker_extractor_or(dialog_or): 
  global personss
  personss =[]
  occups = []
  speaker_ex_or = []
  for i in range(len(dialog_or)):
    dialog_s = dialog_or[i].split(' ')    
    first_t = dialog_s[1]
    second_t = dialog_s[2]    
    # if first_t.endswith("관") or first_t.endswith("장") or first_t.endswith("위원") or first_t.endswith("참고인") and len(first_t) >= 3:
    if second_t != "의원" and second_t != "위원" and second_t != "委員" and second_t != "議員":
      occup = first_t.replace("◯ ","")
    else:
      person = first_t.replace("◯ ","")
    if second_t == "의원" or second_t == "위원" or second_t == "委員" or second_t == "議員":
      occup = second_t
    else:
      person = second_t        
    personss.append(person)
    occups.append(occup)  
  po = []
  for j in range(len(personss)):
    sp = personss[j]+ " " + occups[j]
    po.append(sp)
  # pprint(po)
  n_po = []

  for v in po:
    if v not in n_po:
      n_po.append(v)      
  for w in range(len(n_po)):    
    n_pos = n_po[w].split(' ')    
    speaker_ex_or.append(n_pos) 
  return speaker_ex_or
speaker_ex_or = speaker_extractor_or(dialog_or)

# pprint(speaker_ex_or)

# 발언자, 발언(한글수정)
def utterance_extractor(dialog): 
  utterance_id = []
  utterance_form = []  
  utterance_note = []
  
  for i in range(len(dialog)):
    dialog_m = dialog[i].split('$%^')
    dialog_s = dialog_m[0].split(' ')
    first_s = dialog_s[1:3]
    second_s = dialog_s[4:]
    utter_id = ' '.join(first_s)
    utter = ' '.join(second_s)    
    third_s = dialog_m[-1]
    utterance_id.append(utter_id)      
    utterance_form.append(utter)  
    utterance_note.append(third_s)
  
  return persons,utterance_id, utterance_form, utterance_note
utterance_ex = utterance_extractor(dialog)
# pprint(utterance_ex)

# 발언자, 발언(원본)
def utterance_extractor_or(dialog_or): 
  utterance_id = []
  utterance_form = []
  utterance_note = []

  for i in range(len(dialog_or)):
    dialog_m = dialog_or[i].split('$%^')
    dialog_s = dialog_m[0].split(' ')    
    second_s = dialog_s[4:]    
    utter = ' '.join(second_s)
    third_s = dialog_m[-1]
    utterance_form.append(utter)
    utterance_note.append(third_s)
  return personss, utterance_form, utterance_note
utterance_ex_or = utterance_extractor_or(dialog_or)
# pprint(utterance_ex_or)

# utterance info
def dialog_formatting(utterance_ex, utterance_ex_or):  
  dialog_json = []    
  utterance_id = utterance_ex_or[0]
  utterance_form = utterance_ex[2] 
  utterance_form_or = utterance_ex_or[1]  
  utterace_note = utterance_ex_or[2]
  utterance_form1 =[]
  utterance_form2 =[]
  utterance_form3 =[]
  utterance_form4 =[]

  
  for e in range(len(utterance_form)):      
    if not (utterance_form[e].find("(") == -1):      
      # pprint(len(utterance_form[e]))
      gandan1 = utterance_form[e].split("(",1)[0]
      gandan2 = utterance_form[e].split(")",1)[-1]      
      utterance_form1.append(gandan1 + gandan2)            
    elif utterance_form[e].find("(") == -1:
      utterance_form1.append(utterance_form[e])

  for ee in range(len(utterance_form1)):      
    if not (utterance_form1[ee].find("(") == -1):            
      gandan1 = utterance_form1[ee].split("(",1)[0]
      gandan2 = utterance_form1[ee].split(")",1)[-1]      
      utterance_form2.append(gandan1 + gandan2)            
    elif utterance_form1[ee].find("(") == -1:
      utterance_form2.append(utterance_form1[ee])
  # pprint(utterance_form2)

  for eee in range(len(utterance_form2)):      
    if not (utterance_form2[eee].find("(") == -1):    
      gandan1 = utterance_form2[eee].split("(",1)[0]
      gandan2 = utterance_form2[eee].split(")",1)[-1]      
      utterance_form3.append(gandan1 + gandan2)            
    elif utterance_form2[eee].find("(") == -1:
      utterance_form3.append(utterance_form2[eee])

  for eeee in range(len(utterance_form3)):      
    if not (utterance_form3[eeee].find("(") == -1):    
      gandan1 = utterance_form3[eeee].split("(",1)[0]
      gandan2 = utterance_form3[eeee].split(")",1)[-1]      
      utterance_form4.append(gandan1 + gandan2)            
    elif utterance_form3[eeee].find("(") == -1:
      utterance_form4.append(utterance_form3[eeee])      
  
  
  for i in range(len(utterance_ex_or[0])):
    d = {}
    d['speaker'] = utterance_id[i]
    d['utterance'] = utterance_form4[i].rstrip()
    d['utterance_or'] = utterance_form_or[i].rstrip()   
    d['note'] = utterace_note[i].rstrip()
    dialog_json.append(d)          
  # result.append(d)
  return dialog_json
  
dialog_json = dialog_formatting(utterance_ex, utterance_ex_or)
# pprint(dialog_json)

# speaker info
def speaker_list_extractor(speaker_ex,speaker_ex_or):
  global p_name
  p_name = []  
  speaker_list = []  
    
  for i in range(len(speaker_ex)):        
    name = speaker_ex[i][0]        
    position = speaker_ex[i][1] 
    # o_name = speaker_ex_or[i][0]
    if position == "진술인" or position == "참고인":
      pass
    elif position != "소위원장대리":
      d = {}      
      d['id'] = name
      # d['age'] = "NA"
      d['occupation'] = position
      # d['sex'] = "NA"
      # d['birthplace'] = "NA"
      # d['principal_residence'] = "NA"
      # d['current_residence'] = "NA"
      # d['original_speaker_id'] = o_name 
      speaker_list.append(d) 
      p_name.append(d['id']) 
    
  return speaker_list
speaker_list = speaker_list_extractor(speaker_ex,speaker_ex_or)
# pprint(speaker_list)

# speaker info(original)
def speaker_list_extractor_or(speaker_ex,speaker_ex_or):
  global p2_name
  p2_name = []  
  speaker_list = []         
  for i in range(len(speaker_ex_or)):        
    # name = speaker_ex[i][0]        
    position = speaker_ex[i][1] 
    o_name = speaker_ex_or[i][0]
    # print(o_name)
    if position == "진술인" or position == "참고인":
      pass
    elif position != "소위원장대리":
      d = {}      
      d['id'] = o_name
      # d['age'] = "NA"
      d['occupation'] = position
      # d['sex'] = "NA"
      # d['birthplace'] = "NA"
      # d['principal_residence'] = "NA"
      # d['current_residence'] = "NA"
      # d['original_speaker_id'] = o_name 
      speaker_list.append(d)
      p2_name.append(d['id'])
  return speaker_list
speaker_list__ = speaker_list_extractor_or(speaker_ex,speaker_ex_or)
# pprint(speaker_list__)

def speaker_extractor2_or(text,speaker_list, speaker_list__, speaker_ex):
  s_start = False  
  ss_start = False  
  break_early = False
  s_sentence = []  
  ss_sentence = []  
  sss_sentence =[]
  c_sentence = []
  d_sentence = []
  speaker_list2 = []  
  speaker_list2__2 = []    
  e_sentence = []
  f_sentence = []
  g_sentence = []
  h_sentence = []
  B_member = []
  part2 = False
  part3 = False
  part4 = False
  part5 = False  
  c_end = False
  d_end = False
  e_end = False
  f_end = False
  g_end = False
  h_end = False
  rol1 = []
  rol2 = []
  role = []
  role2 =[]
  b = 0
  # 산회) 이하 제~일) 이상 문장 뽑기
  # for i in range(len(text)):
  #   if text[i].endswith("산회)") or text[i].endswith('중지)'):
  #     s_start = i + 1  
  for i in range(len(text)):
    if text[i].startswith("◯출석") or text[i].startswith("○출석"):
      s_start = i - 1       
      break_early = True
      break 
  break_early = False  
  for i in range(len(text)):
    if text[i].startswith("제") and (text[i].endswith('일)') or text[i].endswith('차')):
      if text[i - 1] == '' and text[i-2] == '' and text[i-3] =='':
        s_end = i - 3
        break_early = True
        break
      break_early = False
      if text[i - 1] == '' and text[i-2] == '':
        s_end = i - 2
        break_early = True
        break
      break_early = False
      if text[i - 1] != '':
        s_end = i
        break_early = True
        break
      break_early = False  
  for sid in range(len(text)):    
    if sid >=s_start and sid < s_end:      
      sub_sentences = hanja.translate(text[sid],"substitution").replace("金","김").replace("李","이").replace("梁","양").replace("羅","나").replace("利","이").replace("勞","노").replace("樂","락").replace("盧","노").replace("樂","락").replace("龍","용").replace("沈","심").replace("宅","택").replace("柳","유")
      s_sentence.append(sub_sentences)   

  # 출석 위원
  for j in range(len(s_sentence)):    
    if s_sentence[j].startswith("◯") or s_sentence[j].startswith("○"):
      m =  j + 1
      A_member = s_sentence[m].split("  ")      
      break_early = True
      break
  break_early = False   
  # p_name2 = []  
  for t in range(len(A_member)):    
    if A_member[t] not in p_name:      
      name = A_member[t]
      d = {}      
      d['id'] = name
      # d['age'] = "NA"
      d['occupation'] = "위원"
      # d['sex'] = "NA"
      # d['birthplace'] = "NA"
      # d['principal_residence'] = "NA"
      # d['current_residence'] = "NA"
      # d['original_speaker_id'] = name 
      speaker_list2.append(d)  
  
  for u in range(len(s_sentence)):
    if s_sentence[u] == "" and s_sentence[u+1] =="":
      first_line_end = u      
      break_early = True
      break 
  break_early = False 
    
  # 위원 아닌 출석 의원(X인)
  for e in range(len(s_sentence)):
    if e > m and e < first_line_end:
      ss_sentence += s_sentence[e].split("\n")      
  for a in range(len(ss_sentence)):    
    # 수정했는데 맞겠지?
    if (ss_sentence[a].startswith("◯") or ss_sentence[a].startswith("○")) and ss_sentence[a].endswith("인)"):      
      if ss_sentence[a].startswith("◯위원") or ss_sentence[a].startswith("○위원"):                
        b = a + 1        
        B_member = ss_sentence[b].split('  ')
        occup = "의원"
        break       
      else:
        b = a + 1
        B_member = ss_sentence[b].split('  ') 
        occup = "위원"
        break     
  for y in range(len(B_member)): 
    if B_member[y] not in p_name:
      name = B_member[y]
      d = {}      
      d['id'] = name
      # d['age'] = "NA"
      d['occupation'] = occup
      # d['sex'] = "NA"
      # d['birthplace'] = "NA"
      # d['principal_residence'] = "NA"
      # d['current_residence'] = "NA"
      # d['original_speaker_id'] = name 
      speaker_list2.append(d)
  # 위원 아닌 출석 의원(X인)2
  if ss_sentence[b+1].endswith("인)") == True:
    for e in range(len(s_sentence)):
      if e > m and e < first_line_end:
        ss_sentence += s_sentence[e].split("\n")      
    for a in range(len(ss_sentence)):    
      # 수정했는데 맞겠지?
      if (ss_sentence[a].startswith("◯") or ss_sentence[a].startswith("○")) and ss_sentence[a].endswith("인)"):      
        if ss_sentence[a].startswith("◯위원") or ss_sentence[a].startswith("○위원"):                
          b = a + 1        
          B_member = ss_sentence[b].split('  ')
          occup = "의원"
        else:
          b = a + 1
          B_member = ss_sentence[b].split('  ') 
          occup = "위원"
          
    for y in range(len(B_member)): 
      if B_member[y] not in p_name:
        name = B_member[y]
        d = {}      
        d['id'] = name
        # d['age'] = "NA"
        d['occupation'] = occup
        # d['sex'] = "NA"
        # d['birthplace'] = "NA"
        # d['principal_residence'] = "NA"
        # d['current_residence'] = "NA"
        # d['original_speaker_id'] = name 
        speaker_list2.append(d)
  
  # 출석 전문위원
  for a in range(len(ss_sentence)):    
    if not ss_sentence[a].endswith("인)") and (ss_sentence[a].startswith("◯") or ss_sentence[a].startswith("○")):
      s_start = a+1  
  for z in range(len(ss_sentence)):
    if z >= s_start:
      sss = ss_sentence[z].split("\n")
      sss_sentence += sss    
  count = int(len(sss_sentence) / 2)  
  id_s = range(count,len(sss_sentence))  
  ocu_s = range(0,count)
  for n, m in zip(id_s, ocu_s) :                
    if sss_sentence[n] not in p_name:        
      d = {}
      d['id'] = sss_sentence[n]
      # d['age'] = "NA"
      d['occupation'] = sss_sentence[m]
      # d['sex'] = "NA"
      # d['birthplace'] = "NA"
      # d['principal_residence'] = "NA"
      # d['current_residence'] = "NA"
      # d['original_speaker_id'] = sss_sentence[n] 
      speaker_list2.append(d) 
  
  try:  
    ## 위원 의원 아래 참석자      
    for p in range(len(s_sentence)):        
      if s_sentence[p].startswith("◯") and s_sentence[p].endswith("참석자"):      
        part = p + 1
        c = p + 2
        c_part = s_sentence[part]
        break  
    for l in range(len(s_sentence)):    
      if l >= part:      
        if s_sentence[l] == "" and s_sentence[l+1] =="":
          c_end = l
          break
        else:
          c_end = l + 1
    for m in range(len(s_sentence)):
      if m >= part and m < c_end:
        ssss = s_sentence[m].split('\n')      
        c_sentence += ssss
    count = int((len(c_sentence) -1) / 2) + 1  
    id_c = range(count, len(c_sentence))
    ocu_c = range(1,count)
    for n, m in zip(id_c, ocu_c) :                
      if c_sentence[n] not in p_name:        
        d = {}
        d['id'] = c_sentence[n]
        # d['age'] = "NA"
        d['occupation'] = c_part + c_sentence[m]
        # d['sex'] = "NA"
        # d['birthplace'] = "NA"
        # d['principal_residence'] = "NA"
        # d['current_residence'] = "NA"
        # d['original_speaker_id'] = c_sentence[n]
        speaker_list2.append(d)

  # 그다음꺼 있으면    
    if c_end != False:
      for h in range(len(s_sentence)):
        if h > c_end:
          if s_sentence[c_end] =="" and s_sentence[c_end+1] =="" and not s_sentence[c_end+2].startswith("◯"):          
            part2 = c_end +2
            d_part = s_sentence[part2]
            break
      if part2 != False:
        for r in range(len(s_sentence)):
          if r >= part2:
            if s_sentence[r] == "" and s_sentence[r+1] =="":
              d_end = r        
              break
            else:
              d_end = r + 1
      if part2 != False:
        for m in range(len(s_sentence)):
          if m >= part2 and m < d_end:
            sss = s_sentence[m].split('\n')      
            d_sentence += sss
        count = int((len(d_sentence) -1) / 2) + 1  
        id_d = range(count, len(d_sentence))
        ocu_d = range(1,count)
        for n, m in zip(id_d, ocu_d) :                
          if d_sentence[n] not in p_name:        
            d = {}
            d['id'] = d_sentence[n]
            # d['age'] = "NA"
            d['occupation'] = d_part + d_sentence[m]
            # d['sex'] = "NA"
            # d['birthplace'] = "NA"
            # d['principal_residence'] = "NA"
            # d['current_residence'] = "NA"
            # d['original_speaker_id'] = d_sentence[n]
            speaker_list2.append(d)     
  # 그다음꺼 있으면    2  
    if d_end != False:
      for h in range(len(s_sentence)):
        if h > d_end:
          if s_sentence[d_end] =="" and s_sentence[d_end+1] =="" and not s_sentence[d_end+2].startswith("◯"):          
            part3 = d_end +2
            e_part = s_sentence[part3]        
            break
      # print(part2)
      if part3 != False:
        for r in range(len(s_sentence)):
          if r >= part3:
            if s_sentence[r] == "" and s_sentence[r+1] =="":
              e_end = r        
              break
            else:
              e_end = r + 1
      if part3 != False:
        for m in range(len(s_sentence)):
          if m >= part3 and m < e_end:
            ssssss = s_sentence[m].split('\n')      
            e_sentence += ssssss
        # pprint(d_sentence)
        count = int((len(e_sentence) -1) / 2) + 1  
        id_e = range(count, len(e_sentence))
        ocu_e = range(1,count)
        for n, m in zip(id_e, ocu_e) :                
          if e_sentence[n] not in p_name:        
            d = {}
            d['id'] = e_sentence[n]
            # d['age'] = "NA"
            d['occupation'] = e_part + e_sentence[m]
            # d['sex'] = "NA"
            # d['birthplace'] = "NA"
            # d['principal_residence'] = "NA"
            # d['current_residence'] = "NA"
            # d['original_speaker_id'] = e_sentence[n]
            speaker_list2.append(d)
  # 그다음꺼 있으면   3
    if e_end != False:
      for h in range(len(s_sentence)):
        if h > e_end:
          if s_sentence[e_end] =="" and s_sentence[e_end+1] =="" and not s_sentence[e_end+2].startswith("◯"):          
            part4 = e_end +2
            f_part = s_sentence[part4]        
            break
      # print(part2)
      if part4 != False:
        for r in range(len(s_sentence)):
          if r >= part4:
            if s_sentence[r] == "" and s_sentence[r+1] =="":
              f_end = r        
              break
            else:
              f_end = r + 1
      if part4 != False:
        for m in range(len(s_sentence)):
          if m >= part4 and m < f_end:
            sssssss = s_sentence[m].split('\n')      
            f_sentence += sssssss
        # pprint(d_sentence)
        count = int((len(f_sentence) -1) / 2) + 1  
        id_f = range(count, len(f_sentence))
        ocu_f = range(1,count)
        for n, m in zip(id_f, ocu_f) :                
          if f_sentence[n] not in p_name:        
            d = {}
            d['id'] = f_sentence[n]
            # d['age'] = "NA"
            d['occupation'] = f_part + f_sentence[m]
            # d['sex'] = "NA"
            # d['birthplace'] = "NA"
            # d['principal_residence'] = "NA"
            # d['current_residence'] = "NA"
            # d['original_speaker_id'] = f_sentence[n]
            speaker_list2.append(d)
  # 그다음꺼 있으면 4
    if f_end != False:
      for h in range(len(s_sentence)):
        if h > f_end:
          if s_sentence[f_end] =="" and s_sentence[f_end+1] =="" and not s_sentence[f_end+2].startswith("◯"):          
            part5 = f_end +2
            g_part = s_sentence[part5]        
            break      
      if part5 != False:
        for r in range(len(s_sentence)):
          if r >= part5:
            if s_sentence[r] == "" and s_sentence[r+1] =="":
              g_end = r        
              break
            else:
              g_end = r + 1
      if part5 != False:
        for m in range(len(s_sentence)):
          if m >= part5 and m < g_end:
            ssssssss = s_sentence[m].split('\n')      
            g_sentence += ssssssss
        # pprint(d_sentence)
        count = int((len(f_sentence) -1) / 2) + 1  
        id_g = range(count, len(f_sentence))
        ocu_g = range(1,count)
        for n, m in zip(id_g, ocu_g) :                
          if g_sentence[n] not in p_name:        
            d = {}
            d['id'] = g_sentence[n]
            # d['age'] = "NA"
            d['occupation'] = g_part + g_sentence[m]
            # d['sex'] = "NA"
            # d['birthplace'] = "NA"
            # d['principal_residence'] = "NA"
            # d['current_residence'] = "NA"
            # d['original_speaker_id'] = f_sentence[n]
            speaker_list2.append(d)              
      # print("except")
    
    for f in range(len(s_sentence)):
      if s_sentence[f].startswith("◯") and s_sentence[f].endswith("진술인"):        
        ss_start = f + 1        
        for jin in range(len(s_sentence)):          
          if jin >= ss_start:
            if s_sentence[jin].endswith(")"):
              ro = ''.join(s_sentence[jin][0:-1].split("(",1)[1:2]).split(" ")            
              rol = ''.join(ro).split('\n')
              rol1 += rol           
        
      elif s_sentence[f].startswith("◯") and s_sentence[f].endswith("참고인"):
        ss_start = f + 1
        for jin in range(len(s_sentence)):
          if jin >= ss_start:
            if s_sentence[jin].endswith(")"):                              
              ro = ''.join(s_sentence[jin][0:-1].split("(",1)[1:2]).split(" ")            
              rol = ''.join(ro).split('\n')
              rol2 += rol
    
    for p in range(len(rol1)):
      role.append("진술인("+rol1[p]+")")
    
    for u in range(len(rol2)):
      role.append("참고인("+rol2[u]+")")
        
    if ss_start != False:      
      for j in range(len(s_sentence)):        
        if j >= ss_start:          
          if s_sentence[j].endswith(")"):
            ee = s_sentence[j].split("(")
            eee = ee[0].split('\n')
            e_sentence += eee    
      # print(e_sentence)
      for n in range(len(e_sentence)) :                
        if e_sentence[n] not in p_name:        
          d = {}
          d['id'] = e_sentence[n]
          # d['age'] = "NA"
          d['occupation'] = role[n]
          # d['sex'] = "NA"
          # d['birthplace'] = "NA"
          # d['principal_residence'] = "NA"
          # d['current_residence'] = "NA"
          # d['original_speaker_id'] = e_sentence[n]
          speaker_list2.append(d)    
    # print(p_name)    
  except:
    print("except")
    # 진술인 참고인
    
    for f in range(len(s_sentence)):
      if s_sentence[f].startswith("◯") and s_sentence[f].endswith("진술인"):        
        ss_start = f + 1        
        for jin in range(len(s_sentence)):          
          if jin >= ss_start:
            if s_sentence[jin].endswith(")"):
              ro = ''.join(s_sentence[jin][0:-1].split("(",1)[1:2]).split(" ")            
              rol = ''.join(ro).split('\n')
              rol1 += rol           
        
      elif s_sentence[f].startswith("◯") and s_sentence[f].endswith("참고인"):
        ss_start = f + 1
        for jin in range(len(s_sentence)):
          if jin >= ss_start:
            if s_sentence[jin].endswith(")"):                              
              ro = ''.join(s_sentence[jin][0:-1].split("(",1)[1:2]).split(" ")            
              rol = ''.join(ro).split('\n')
              rol2 += rol
    
    for p in range(len(rol1)):
      role.append("진술인("+rol1[p]+")")
    
    for u in range(len(rol2)):
      role.append("참고인("+rol2[u]+")")
            
    if ss_start != False:      
      for j in range(len(s_sentence)):        
        if j >= ss_start:          
          if s_sentence[j].endswith(")"):
            ee = s_sentence[j].split("(")
            eee = ee[0].split('\n')
            e_sentence += eee         
      for n in range(len(e_sentence)) :                
        if e_sentence[n] not in p_name:        
          d = {}
          d['id'] = e_sentence[n]
          # d['age'] = "NA"
          d['occupation'] = role[n]
          # d['sex'] = "NA"
          # d['birthplace'] = "NA"
          # d['principal_residence'] = "NA"
          # d['current_residence'] = "NA"
          # d['original_speaker_id'] = e_sentence[n]
          speaker_list2.append(d)    
    # print(p_name)    
  finally:
    for last in range(len(speaker_list2)):
      if speaker_list2[last]['id'] not in p2_name:
        d = {}
        d['id'] = speaker_list2[last]['id']
        # d['age'] = "NA"
        d['occupation'] = speaker_list2[last]['occupation']
        # d['sex'] = "NA"
        # d['birthplace'] = "NA"
        # d['principal_residence'] = "NA"
        # d['current_residence'] = "NA"
        # d['original_speaker_id'] = speaker_list2[last]['id']  
        speaker_list2__2.append(d)     
  return speaker_list2__2
speaker_list2__2 = speaker_extractor2_or(text,speaker_list, speaker_list__, speaker_ex)
# pprint(speaker_list2__2)

# json 형태로 변환하기 위한 틀
def convert_to_korea(meta, speaker_list, speaker_list__, speaker_list2__2, dialog_json, id):
    # k = 0
    id = "SBRW 2100000001"
    # id_code = korea_formatted_data['id']
    # id = id_code.split(" ")
    # id0 = id[0]
    # id1 = int(id[1]) + k
    # id = id0 + str(id1)
    # korea_formatted_data['id'] = id    
    # k += 1

    metadata = {}
    metadata['title'] = "국립국어원 국회 회의록 원시 말뭉치 " + id
    metadata['creator'] = "국립국어원"
    metadata['distributor'] = "국립국어원"
    metadata['year'] = "2021"
    metadata['category'] = meta['카테고리']
    metadata['annotation_level'] = ['원시']
    metadata['sampling'] = "본문 전체"
        
    doc = {}
    doc['id'] = id+".1"
    doc_metadata = {}
    doc_metadata['title'] = meta['회의록제목']
    doc_metadata['author'] = meta['작성']
    # doc_metadata['author_id'] = "" 
    doc_metadata['publisher'] = meta['작성']
    doc_metadata['date'] = meta['일시']
    doc_metadata['topic'] = meta['토픽']    
    # doc_metadata['original_topic'] = ""
    # doc_metadata['crawl_date'] = ""

    doc_metadata['speaker'] = speaker_list__ + speaker_list2__2    
    # pprint(meta['회의록제목'])
    # pprint(meta['일시'])
    # pprint(doc_metadata['speaker'])
    # doc_metadata['setting'] = {}
    # doc_metadata['setting']['relation'] = "NA"
    
    # doc_metadata['file_id'] = meta['파일명']
      # '회의록 원문 자료 파일명:'

    doc['metadata'] = doc_metadata
    
    # doc['paragraph'] = []
    # paragraph = {}
    # paragraph['id'] = ""
    # paragraph['form'] = ""
    # paragraph['original_form'] = ""
    # doc['paragraph'].append(paragraph)
    
    utterance = []
    
    n = 0
    for i in dialog_json:
        utter = {}
        utter['id'] = id+".1.1."+ str(n+1)
        utter['form'] = i['utterance']
        utter['original_form'] = i['utterance_or']
        # print(utter['original_form'].find("(",1))
        # print(utter['original_form'].find(")",1))
        utter['speaker_id'] = i['speaker']
        utter['note'] = i['note']
        utterance.append(utter)
        n += 1
        # pprint(utter['id'])   
    doc['utterance'] = utterance
    
    d = {}
    d['id'] = id
    d['metadata'] = metadata
    d['document'] = doc
    
    return d
korea_formatted_data = convert_to_korea(meta, speaker_list,speaker_list__, speaker_list2__2, dialog_json, id)
# pprint(korea_formatted_data)
# pprint(korea_formatted_data['document']['utterance'][0])

# argparse 이용 터미널로 불러오기
parser = argparse.ArgumentParser(description='list to json')
parser.add_argument('--input', metavar='', type=str,
                    required=True, help='Input Folder')
parser.add_argument('--output', metavar='', type=str,
                    required=True, help='Output Folder')
args = parser.parse_args()

# json 형태로 변환
def txt_reader(input, output, id):
  k = 0
  files = sorted(glob(input + "*.txt"))  
  for fname in files:
    with open(fname, 'r', encoding='utf-8-sig') as file:
      txt = file.readlines()         
      pass
      text = clean_up(txt)            
      pm_date = date_extractor(text)      
      pm_author = author(text)      
      pm_topic = topic_extractor(text)      
      meta = meta_extractor(text, pm_date, pm_topic, pm_author, fname)      
      dialog = dialog_extractor(txt)      
      dialog_or = dialog_extractor_or(txt)
      speaker_ex = speaker_extractor(dialog)
      speaker_ex_or = speaker_extractor_or(dialog_or)      
      utterance_ex = utterance_extractor(dialog)       
      utterance_ex_or = utterance_extractor_or(dialog_or)         
      dialog_json = dialog_formatting(utterance_ex, utterance_ex_or)  
      speaker_list = speaker_list_extractor(speaker_ex,speaker_ex_or)              
      speaker_list__ = speaker_list_extractor_or(speaker_ex,speaker_ex_or)      
      speaker_list2__2 = speaker_extractor2_or(text,speaker_list, speaker_list__, speaker_ex)     
      korea_formatted_data = convert_to_korea(meta, speaker_list, speaker_list__, speaker_list2__2, dialog_json, id)     
      id = "SBRW 2100000001"
      id_code = id.split(" ")
      id0 = id_code[0]
      id1 = int(id_code[1]) + k
      id_code = id0 + str(id1)
      korea_formatted_data['id'] = id_code
      korea_formatted_data['metadata']['title'] = "국립국어원 국회 회의록 원시 말뭉치 " + id_code
      korea_formatted_data['document']['id'] = id_code + ".1"
      # print(korea_formatted_data)
      n = 0
      for i in dialog_json:
        korea_formatted_data['document']['utterance'][n]['id'] = id_code+".1.1."+ str(n+1)
        n += 1
      k += 1     
    # fname_write = fname.split('/')[-1].split('.txt')[0]    
      
    with open(output+id_code+'.json', 'w') as f:
            json.dump(korea_formatted_data, f, ensure_ascii=False, indent=4)
    
    /content/drive/My Drive/Colab Notebooks/task/Minutes(Korean)/(jw)pm_summary_preprocessor/

# txt_reader(id)
# txt_reader(fname)

# def mapping_table(map,utterance_ex):      
#   k = 0  
#   files = sorted(glob("/Users/jaewanpark/Documents/회의록/pm_summary_preprocessor(pjw)/요약대상회의록-2차/*.txt"))  
#   for fname in files:
#     with open(fname, 'r', encoding='utf-8-sig') as file:
#       txt = file.readlines()
#       pass              
#       map = mapping(txt)
#       dialog = dialog_extractor(txt)
#       utterance_ex = utterance_extractor(dialog)
#       id = "SBRW 2100000001"
#       id_code = id.split(" ")
#       id0 = id_code[0]
#       id1 = int(id_code[1]) + k
#       id_code = id0 + str(id1)
#       o_id = []    
#       n_id = []  
#       o_id = map[0]
#       n_id = map[1]
#       o_utter = map[2]
#       n_utter = map[3]      
#       mapp = []
#       mappp = []
#       speaker = utterance_ex[1]
#       utterance = utterance_ex[2]        
#       note = utterance_ex[3]

#       # if n_utter in o_utter:
#       #   pass
#       # else:
#       #   print(k)
#       #   print('error')
      
#       for m in range(len(n_id)):
#         o_id = [map[0][m]]
#         n_id = [map[1][m]]
#         speaker = [utterance_ex[1][m]]
#         utterance = [utterance_ex[2][m]]
#         note = [utterance_ex[3][m]]
#         mapp = n_id + o_id + speaker + utterance + note
#         mappp.append(mapp)            
  
#     with open("/Users/jaewanpark/Documents/회의록/pm_summary_preprocessor(pjw)/mapping_table(id)/mapping_table_id_2차/"+ id_code+".csv", 'wt', encoding='utf-8-sig', newline='') as out_file:      
#       csv_writer = csv.writer(out_file, delimiter=',') 
#       csv_writer.writerow(["new_id","ori_id","speaker","utterance","note"])
#       csv_writer.writerows(mappp)
#       k +=1

      
# mapping_table(map,utterance_ex)
#   return mappp
# mapping_table = mapping_table(utterance_ex,mapping)
# pprint(mapping_table)

# def csv_extractor(id):
#     csv_lines = []
#     k = 0
#     files = sorted(glob(
#         "/Users/jaewanpark/Documents/회의록/pm_summary_preprocessor(pjw)/요약대상회의록-1차/*.txt"))
#     for fname in files:
#         id = "SBRW 2100000001"
#         id_code = id.split(" ")
#         id0 = id_code[0]
#         id1 = int(id_code[1]) + k
#         id_code = id0 + str(id1)
#         k += 1
#         fname_write = fname.split('/')[-1].split('.txt')[0]
#         csv_lines1 = id_code + ', ' + fname_write + '\n'
#         csv_lines2 = unicodedata.normalize('NFD', csv_lines1)
#         csv_lines3 = unicodedata.normalize('NFC', csv_lines2)

#         csv_lines.append(csv_lines3)

#         with open("/Users/jaewanpark/Documents/회의록/pm_summary_preprocessor(pjw)/mapping_table(제목)/mapping_table.csv", 'wt', encoding='utf-8-sig', newline='') as out_file:
#             csv_writer = csv.writer(out_file, delimiter='\t')
#             csv_writer.writerows([csv_lines])
#             # print(tsv_writer)


# csv_extractor(id)

if __name__ == '__main__':
    txt_reader(args.input, args.output, id)
